@using Microsoft.AspNetCore.Identity
@using System.Globalization
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@model LP2MVCWithAuth.Models.ListaTarefas
@{
    ViewData["Title"] = "Home Page";
}
<link rel="stylesheet" href="app.css" type="text/css" />
<script type="text/javascript"
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBrx8uPsxl7Xq4bxSZBS0xYBVfa-Mps79M"></script>
<script src="jquery-3.6.0.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://unpkg.com/location-picker/dist/location-picker.min.js"></script>
<style type="text/css">
    .map {
        width: 100%;
        height: 480px;
    }
</style>

<div class="container">
    @if (SignInManager.IsSignedIn(User))
    {
        <h2>Criar uma nova tarefa.</h2>
        <hr />

        <input id="idtarefa" value="@Model.Id" hidden />

        <div>
            <h3>Ponto de encontros:</h3>
            <div id="mapInitial" class="map"></div>
            <br>
            <button id="confirmPositionInitial">Confirm Position</button>
            <button id="SaveLocations">Save Position</button>
            <br>
        </div>

        <br />

        <script>
            // Get element references
            var locations = [];
            var confirmBtnInitial = document.getElementById('confirmPositionInitial');
            var saveLocations = document.getElementById('SaveLocations');

            // Initialize locationPicker plugin
            var lpInitial = new locationPicker('mapInitial', {
                setCurrentPosition: true, // You can omit this, defaults to true
            }, {
                zoom: 15 // You can set any google map options here, zoom defaults to 15
            });

            // Listen to button onclick event
            confirmBtnInitial.onclick = function() {
                // Get current location and show it in HTML
                var location = lpInitial.getMarkerPosition();

                let locationModel = {
                    "Longitude": location.lat,
                    "Latitude": location.lng,
                }

                locations.push(locationModel);
            };

            saveLocations.onclick = function() {
                locations.forEach(addLocationByTarefa);
            }

            function addLocationByTarefa(item) {
                var tarefaId = document.getElementById('idtarefa').value;
                let locationModel = {
                    "Latitude": item.Latitude,
                    "Longitude": item.Longitude,
                    "IdTarefa": tarefaId,
                }

                $.post("/Tarefas/AddLocationByTarefa", locationModel)
                    .done(function() {
                        alert("Localização Adicionada");
                    })
                    .fail(function() {
                        alert("error");
                    })
                    .always(function() {
                        console.log("finished");
                    });
            }

            // Listen to map idle event, listening to idle event more accurate than listening to ondrag event
            google.maps.event.addListener(lpInitial.mapInitial, 'idle', function(event) {
                // Get current location and show it in HTML
                var location = lpInitial.getMarkerPosition();
            });
        </script>
    }
</div>
